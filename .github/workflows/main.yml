# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test, build and deploy

on:
  push: {}
  pull_request: {}

jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        python-version: [3.8, 3.9]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: bash ./scripts/install-dependencies.sh
    - name: Lint with flake8
      run: flake8 . --count
    - name: Test with pytest - ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        full_cmdpath=$(command -v pytest)
        DISPLAY=:0 sudo $full_cmdpath -s
    - name: Test with pytest - windows
      if: "startsWith(matrix.os, 'windows')"
      run: |
        Set-DisplayResolution -Width 1920 -Height 1080 -Force
        pytest -s
    - name: Test with pytest - macos
      if: "startsWith(matrix.os, 'macos')"
      run: |
        "/Library/Application Support/VMware Tools/vmware-resolutionSet" 2560 1440
        brew install tcl-tk
        brew info tcl-tk
        sudo pytest -s

  installer:
    name: Build installation
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        python-version: [3.9]
    runs-on:  ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: bash ./scripts/install-dependencies.sh
    - name: Pyinstaller
      run: bash ./scripts/build_install.sh
    - name: Set installer name
      id: installer
      run: echo ::set-output name=fname::kirafan-bot-$(echo ${{ github.ref }} | sed 's/.*v//')-$(echo ${{ matrix.os }} | sed 's/-.*//; s/ubuntu/linux/')
      shell: bash
    - name: Upload artifact
      if: github.repository == 'smallbomb/kirafan-bot' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.installer.outputs.fname }}
        path: kirafan-bot.tar

  release:
    name: New release
    if: github.repository == 'smallbomb/kirafan-bot' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - test
      - installer
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: [3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Download installer artifact
        uses: actions/download-artifact@v2
        with:
          path: download
      - name: Move artifact file to workspace
        run: for d in kirafan* ; do mv $d/kira* ../$d.tar ; done
        working-directory: download
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          files: |
            *windows.tar

